ja:
  #--- ActiveSupport-5.2.3
  date:
    formats:
      # Use the strftime parameters for formats.
      # When no format has been given, it uses default.
      # You can provide other formats here if you like!
      default: "%Y/%m/%d"
      short: "%m/%d"
      long: "%Y年%m月%d日(%a)"

    day_names: [日曜日, 月曜日, 火曜日, 水曜日, 木曜日, 金曜日, 土曜日]
    abbr_day_names: [日, 月, 火, 水, 木, 金, 土]

    # Don't forget the nil at the beginning; there's no such thing as a 0th month
    month_names: [~, 1月, 2月, 3月, 4月, 5月, 6月, 7月, 8月, 9月, 10月, 11月, 12月]
    abbr_month_names: [~, 1月, 2月, 3月, 4月, 5月, 6月, 7月, 8月, 9月, 10月, 11月, 12月]
    # Used in date_select and datetime_select.
    order:
      - year
      - month
      - day

  time:
    formats:
      default: "%Y年%m月%d日(%a) %H時%M分%S秒 %z"
      short: "%m/%d %H:%M"
      long: "%Y/%m/%d %H:%M"
    am: 午前
    pm: 午後

  # Used in array.to_sentence.
  support:
    array:
      words_connector: 、
      two_words_connector: 、
      last_word_connector: 、
  number:
    # Used in NumberHelper.number_to_delimited()
    # These are also the defaults for 'currency', 'percentage', 'precision', and 'human'
    format:
      # Sets the separator between the units, for more precision (e.g. 1.0 / 2.0 == 0.5)
      separator: "."
      # Delimits thousands (e.g. 1,000,000 is a million) (always in groups of three)
      delimiter: ","
      # Number of decimals, behind the separator (the number 1 with a precision of 2 gives: 1.00)
      precision: 3
      # If set to true, precision will mean the number of significant digits instead
      # of the number of decimal digits (1234 with precision 2 becomes 1200, 1.23543 becomes 1.2)
      significant: false
      # If set, the zeros after the decimal separator will always be stripped (eg.: 1.200 will be 1.2)
      strip_insignificant_zeros: false

    # Used in NumberHelper.number_to_currency()
    currency:
      format:
        # Where is the currency sign? %u is the currency unit, %n the number (default: $5.00)
        format: "%n%u"
        unit: 円
        # These five are to override number.format and are optional
        separator: "."
        delimiter: ","
        precision: 0
        significant: false
        strip_insignificant_zeros: false

    # Used in NumberHelper.number_to_percentage()
    percentage:
      format:
        # These five are to override number.format and are optional
        # separator:
        delimiter: ""
        # precision:
        # significant: false
        # strip_insignificant_zeros: false
        format: "%n%"

    # Used in NumberHelper.number_to_rounded()
    precision:
      format:
        # These five are to override number.format and are optional
        # separator:
        delimiter: ""
        # precision:
        # significant: false
        # strip_insignificant_zeros: false

    # Used in NumberHelper.number_to_human_size() and NumberHelper.number_to_human()
    human:
      format:
        # These five are to override number.format and are optional
        # separator:
        delimiter: ""
        precision: 3
        significant: true
        strip_insignificant_zeros: true
      # Used in number_to_human_size()
      storage_units:
        # Storage units output formatting.
        # %u is the storage unit, %n is the number (default: 2 MB)
        format: "%n%u"
        units:
          byte: バイト
          kb: KB
          mb: MB
          gb: GB
          tb: TB
          pb: PB
          eb: EB
      # Used in NumberHelper.number_to_human()
      decimal_units:
        format: "%n %u"
        # Decimal units output formatting
        # By default we will only quantify some of the exponents
        # but the commented ones might be defined or overridden
        # by the user.
        units:
          # femto: Quadrillionth
          # pico: Trillionth
          # nano: Billionth
          # micro: Millionth
          # mili: Thousandth
          # centi: Hundredth
          # deci: Tenth
          unit: ""
          # ten:
          #   one: Ten
          #   other: Tens
          # hundred: Hundred
          thousand: 千
          million: 百万
          billion: 十億
          trillion: 兆
          quadrillion: 千兆

  #--- ActiveModel-5.2.3
  errors:
    # The default format to use in full error messages.
    format: "%{attribute}%{message}"

    # The values :model, :attribute and :value are always available for interpolation
    # The value :count is available when applicable. Can be used for pluralization.
    messages:
      model_invalid: "バリデーションに失敗しました: %{errors}"
      inclusion: は一覧にありません
      exclusion: は予約されています
      invalid: は不正な値です
      confirmation: "と%{attribute}の入力が一致しません"
      accepted: を受諾してください
      empty: を入力してください
      blank: を入力してください
      present: は入力しないでください
      too_long: "は%{count}文字以内で入力してください"
      too_short: "は%{count}文字以上で入力してください"
      wrong_length: "は%{count}文字で入力してください"
      not_a_number: は数値で入力してください
      not_an_integer: は整数で入力してください
      greater_than: "は%{count}より大きい値にしてください"
      greater_than_or_equal_to: "は%{count}以上の値にしてください"
      equal_to: "は%{count}にしてください"
      less_than: "は%{count}より小さい値にしてください"
      less_than_or_equal_to: "は%{count}以下の値にしてください"
      other_than: "は%{count}以外の値にしてください"
      odd: は奇数にしてください
      even: は偶数にしてください

  #--- ActiveRecord-5.2.3
      # Default error messages
      required: を入力してください
      taken: はすでに存在します

  # Attributes names common to most models
  #attributes:
    #created_at: "Created at"
    #updated_at: "Updated at"

  # Active Record models configuration
  activerecord:
    errors:
      messages:
        record_invalid: "バリデーションに失敗しました: %{errors}"
        restrict_dependent_destroy:
          has_one: "%{record}が存在しているので削除できません"
          has_many: "%{record}が存在しているので削除できません"
        # Append your own errors here or at the model/attributes scope.

      # You can define own errors for models or model attributes.
      # The values :model, :attribute and :value are always available for interpolation.
      #
      # For example,
      #   models:
      #     user:
      #       blank: "This is a custom blank message for %{model}: %{attribute}"
      #       attributes:
      #         login:
      #           blank: "This is a custom blank message for User login"
      # Will define custom blank validation message for User model and
      # custom blank validation message for login attribute of User model.
      #models:

    # Translate model names. Used in Model.human_name().
    #models:
      # For example,
      #   user: "Dude"
      # will translate User model name to "Dude"

    # Translate model attribute names. Used in Model.human_attribute_name(attribute).
    #attributes:
      # For example,
      #   user:
      #     login: "Handle"
      # will translate User attribute "login" as "Handle"
